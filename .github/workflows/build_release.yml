name: Build Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-godot-cpp:
    name: Build godot-cpp for ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os-name: Linux
            platform: linux
            arch: x86_64
          - os: ubuntu-latest
            os-name: Windows
            platform: windows
            arch: x86_64
          - os: macos-latest
            os-name: macOS
            platform: macos
            arch: universal
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install SCons
        run: pip install scons

      - name: Install MinGW (for Windows cross-compilation)
        if: matrix.platform == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Cache godot-cpp
        id: cache-godotcpp
        uses: actions/cache@v4
        with:
          path: |
            godot-cpp/bin
            godot-cpp/gen
          key: godot-cpp-${{ matrix.platform }}-${{ hashFiles('godot-cpp/SConstruct', 'godot-cpp/gdextension/extension_api.json', 'godot-cpp/binding_generator.py') }}

      - name: Build godot-cpp
        if: steps.cache-godotcpp.outputs.cache-hit != 'true'
        env:
          CC: ${{ matrix.platform == 'windows' && 'x86_64-w64-mingw32-gcc' || '' }}
          CXX: ${{ matrix.platform == 'windows' && 'x86_64-w64-mingw32-g++' || '' }}
        run: |
          cd godot-cpp
          scons platform=${{ matrix.platform }} arch=${{ matrix.arch }} ${{ matrix.platform == 'windows' && 'use_mingw=yes' || '' }} generate_bindings=yes target=template_release
          scons platform=${{ matrix.platform }} arch=${{ matrix.arch }} ${{ matrix.platform == 'windows' && 'use_mingw=yes' || '' }} target=template_debug

  build-addon:
    name: Build addon for ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    needs: build-godot-cpp
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os-name: Linux
            platform: linux
            arch: x86_64
            extension: so
          - os: ubuntu-latest
            os-name: Windows
            platform: windows
            arch: x86_64
            extension: dll
          - os: macos-latest
            os-name: macOS
            platform: macos
            arch: universal
            extension: dylib
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install SCons
        run: pip install scons
        
      - name: Install MinGW (for Windows cross-compilation)
        if: matrix.platform == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Restore godot-cpp cache
        uses: actions/cache/restore@v4
        with:
          path: |
            godot-cpp/bin
            godot-cpp/gen
          key: godot-cpp-${{ matrix.platform }}-${{ hashFiles('godot-cpp/SConstruct', 'godot-cpp/gdextension/extension_api.json', 'godot-cpp/binding_generator.py') }}

      - name: Build project
        env:
          CC: ${{ matrix.platform == 'windows' && 'x86_64-w64-mingw32-gcc' || '' }}
          CXX: ${{ matrix.platform == 'windows' && 'x86_64-w64-mingw32-g++' || '' }}
        run: |
          scons platform=${{ matrix.platform }} ${{ matrix.platform == 'windows' && 'use_mingw=yes' || '' }} target=template_release arch=${{ matrix.arch }}

      - name: Package addon
        run: |
          mkdir -p package/addons/Gedis/bin
          cp -r addons/Gedis/* package/addons/Gedis/
          cp addons/Gedis/bin/libgedis.${{ matrix.extension }} package/addons/Gedis/bin/
          cd package
          zip -r ../gedis-${{ matrix.platform }}-${{ matrix.arch }}.zip .
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gedis-${{ matrix.platform }}-${{ matrix.arch }}
          path: gedis-${{ matrix.platform }}-${{ matrix.arch }}.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-addon]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine builds
        run: |
          mkdir -p release_package
          unzip artifacts/gedis-linux-x86_64/gedis-linux-x86_64.zip -d release_package
          unzip artifacts/gedis-windows-x86_64/gedis-windows-x86_64.zip -d temp_windows
          cp -r temp_windows/addons/Gedis/bin/* release_package/addons/Gedis/bin/
          unzip artifacts/gedis-macos-universal/gedis-macos-universal.zip -d temp_macos
          cp -r temp_macos/addons/Gedis/bin/* release_package/addons/Gedis/bin/
          cd release_package
          zip -r ../gedis-release.zip .

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: gedis-release.zip
          name: gedis-${{ github.ref_name }}.zip
