name: Build Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            arch: x86_64
            artifact_name: gedis-windows-x86_64
          - os: macos-latest
            platform: macos
            arch: universal
            artifact_name: gedis-macos-universal
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            artifact_name: gedis-linux-x86_64
    name: Build for ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      - name: Cache SCons build
        uses: actions/cache@v4
        with:
          path: |
            .sconsign.dblite
            addons/Gedis/bin
          key: ${{ runner.os }}-scons-${{ matrix.platform }}-${{ matrix.arch }}-${{ hashFiles('SConstruct', 'src/**/*.cpp', 'src/**/*.h') }}-${{ runner.os == 'Windows' && 'mingw' || 'native' }}-v2
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.platform }}-${{ matrix.arch }}-${{ runner.os == 'Windows' && 'mingw' || 'native' }}-v2
            ${{ runner.os }}-scons-${{ matrix.platform }}-${{ matrix.arch }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install SCons
        run: pip install scons

      # --- Windows Toolchain: use MSYS2/Mingw-w64 ---
      - name: Set up MSYS2 / MinGW-w64
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config make

      - name: Set up Windows environment variables
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          echo "Setting up MinGW environment..."
          echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "PATH=/mingw64/bin:$PATH" >> $GITHUB_ENV
          
          # Verify the tools are available
          which x86_64-w64-mingw32-gcc
          which x86_64-w64-mingw32-g++
          x86_64-w64-mingw32-gcc --version

      - name: Cache godot-cpp build
        id: cache-godotcpp
        uses: actions/cache@v4
        with:
          path: |
            godot-cpp/bin
            godot-cpp/gen
            godot-cpp/.sconsign.dblite
          key: ${{ runner.os }}-godot-cpp-${{ matrix.platform }}-${{ matrix.arch }}-${{ hashFiles('godot-cpp/SConstruct', 'godot-cpp/gdextension/extension_api.json', 'godot-cpp/binding_generator.py') }}-${{ runner.os == 'Windows' && 'mingw' || 'native' }}-v2
          restore-keys: |
            ${{ runner.os }}-godot-cpp-${{ matrix.platform }}-${{ matrix.arch }}-${{ runner.os == 'Windows' && 'mingw' || 'native' }}-v2
            ${{ runner.os }}-godot-cpp-${{ matrix.platform }}-${{ matrix.arch }}-
      - name: Build godot-cpp (cache miss)
        if: steps.cache-godotcpp.outputs.cache-hit != 'true'
        shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
        run: |
          cd godot-cpp
          echo "Building godot-cpp for ${{ matrix.platform }} (${{ matrix.arch }})"
          
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Using MinGW cross-compiler"
            echo "CC: $CC, CXX: $CXX"
            scons platform=windows arch=${{ matrix.arch }} generate_bindings=yes target=template_release use_mingw=yes
            scons platform=windows arch=${{ matrix.arch }} generate_bindings=yes target=template_debug use_mingw=yes
          else
            scons platform=${{ matrix.platform }} arch=${{ matrix.arch }} generate_bindings=yes target=template_release
            scons platform=${{ matrix.platform }} arch=${{ matrix.arch }} generate_bindings=yes target=template_debug
          fi
          
          echo "Verifying godot-cpp build outputs:"
          ls -la bin/ || echo "No bin directory found"
          ls -la gen/ || echo "No gen directory found"

      - name: Build with SCons
        shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
        run: |
          echo "Building main project for ${{ matrix.platform }} (${{ matrix.arch }})"
          
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Diagnostics (Windows):"
            echo "CC: $CC, CXX: $CXX"
            which $CC || echo "CC not found in PATH"
            which $CXX || echo "CXX not found in PATH"
            $CC --version || echo "CC version check failed"
            scons --version || echo "SCons version check failed"
            
            echo "Building with MinGW..."
            scons platform=windows target=template_release arch=${{ matrix.arch }} use_mingw=yes
          else
            scons platform=${{ matrix.platform }} target=template_release arch=${{ matrix.arch }}
          fi
          
          echo "Verifying build outputs:"
          ls -la addons/Gedis/bin/ || echo "No build outputs found"

      - name: Package addon
        shell: bash
        run: |
          mkdir -p package/addons/Gedis/bin
          cp -r addons/Gedis/* package/addons/Gedis/
          
          echo "Available build outputs:"
          find . -name "*.dll" -o -name "*.so" -o -name "*.framework" | head -10
          
          if [ "${{ runner.os }}" == "Windows" ]; then
            # The actual file is created in addons/Gedis/bin/ as libgedis.dll
            if [ -f "addons/Gedis/bin/libgedis.dll" ]; then
              echo "Found Windows DLL: addons/Gedis/bin/libgedis.dll"
              # File is already in the right location, just ensure it's copied
              cp "addons/Gedis/bin/libgedis.dll" "package/addons/Gedis/bin/"
            else
              echo "ERROR: Windows DLL not found at expected location"
              ls -la addons/Gedis/bin/ || echo "addons/Gedis/bin/ directory not found"
              exit 1
            fi
          elif [ "${{ runner.os }}" == "macOS" ]; then
            if [ -d "addons/Gedis/bin/libgedis.framework" ]; then
              cp -r "addons/Gedis/bin/libgedis.framework" "package/addons/Gedis/bin/"
            else
              echo "ERROR: macOS framework not found"
              ls -la addons/Gedis/bin/ || echo "addons/Gedis/bin/ directory not found"
              exit 1
            fi
          else
            # Linux
            if [ -f "addons/Gedis/bin/libgedis.so" ]; then
              cp "addons/Gedis/bin/libgedis.so" "package/addons/Gedis/bin/"
            else
              echo "ERROR: Linux shared library not found"
              ls -la addons/Gedis/bin/ || echo "addons/Gedis/bin/ directory not found"
              exit 1
            fi
          fi
          
          cd package
          zip -r ../${{ matrix.artifact_name }}.zip .
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine builds
        run: |
          mkdir -p release_package
          unzip artifacts/gedis-windows-x86_64/gedis-windows-x86_64.zip -d release_package
          unzip artifacts/gedis-macos-universal/gedis-macos-universal.zip -d temp_macos
          unzip artifacts/gedis-linux-x86_64/gedis-linux-x86_64.zip -d temp_linux
          cp -r temp_macos/addons/Gedis/bin/* release_package/addons/Gedis/bin/
          cp -r temp_linux/addons/Gedis/bin/* release_package/addons/Gedis/bin/
          cd release_package
          zip -r ../gedis-release.zip .
          cd ..

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: gedis-release.zip
          name: gedis-${{ github.ref_name }}.zip